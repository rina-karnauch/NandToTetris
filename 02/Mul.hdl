CHIP Mul{
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    // we multiply just like with decimal numbers.
    // take a[16] and mul each of its digits by the digits of each bit of b[16]
    // and than add them all together

    // we first get the mul by the digit we currently at
    // and then we shift left a, so we mul by another number.

    Mux16(a[0..15]=false, b=a, sel=b[0], out=out0);
    ShiftLeft(in=a, out=shift0);

    Mux16(a[0..15]=false, b=shift0, sel=b[1], out=out1);
    ShiftLeft(in=shift0, out=shift1);

    Mux16(a[0..15]=false, b=shift1, sel=b[2], out=out2);
    ShiftLeft(in=shift1, out=shift2);

    Mux16(a[0..15]=false, b=shift2, sel=b[3], out=out3);
    ShiftLeft(in=shift2, out=shift3);

    Mux16(a[0..15]=false, b=shift3, sel=b[4], out=out4);
    ShiftLeft(in=shift3, out=shift4);

    Mux16(a[0..15]=false, b=shift4, sel=b[5], out=out5);
    ShiftLeft(in=shift4, out=shift5);

    Mux16(a[0..15]=false, b=shift5, sel=b[6], out=out6);
    ShiftLeft(in=shift5, out=shift6);

    Mux16(a[0..15]=false, b=shift6, sel=b[7], out=out7);
    ShiftLeft(in=shift6, out=shift7);

    Mux16(a[0..15]=false, b=shift7, sel=b[8], out=out8);
    ShiftLeft(in=shift7, out=shift8);

    Mux16(a[0..15]=false, b=shift8, sel=b[9], out=out9);
    ShiftLeft(in=shift8, out=shift9);

    Mux16(a[0..15]=false, b=shift9, sel=b[10], out=out10);
    ShiftLeft(in=shift9, out=shift10);

    Mux16(a[0..15]=false, b=shift10, sel=b[11], out=out11);
    ShiftLeft(in=shift10, out=shift11);

    Mux16(a[0..15]=false, b=shift11, sel=b[12], out=out12);
    ShiftLeft(in=shift11, out=shift12);

    Mux16(a[0..15]=false, b=shift12, sel=b[13], out=out13);
    ShiftLeft(in=shift12, out=shift13);

    Mux16(a[0..15]=false, b=shift13, sel=b[14], out=out14);
    ShiftLeft(in=shift13, out=shift14);

    // no need for a shift.
    Mux16(a[0..15]=false, b=shift14, sel=b[15], out=out15);

    // adding all options.
    Add16(a=out0, b=out1, out=add0);
    Add16(a=add0, b=out2, out=add1);
    Add16(a=add1, b=out3, out=add2);
    Add16(a=add2, b=out4, out=add3);
    Add16(a=add3, b=out5, out=add4);
    Add16(a=add4, b=out6, out=add5);
    Add16(a=add5, b=out7, out=add6);
    Add16(a=add6, b=out8, out=add7);
    Add16(a=add7, b=out9, out=add8);
    Add16(a=add8, b=out10, out=add9);
    Add16(a=add9, b=out11, out=add10);
    Add16(a=add10, b=out12, out=add11);
    Add16(a=add11, b=out13, out=add12);
    Add16(a=add12, b=out14, out=add13);
    Add16(a=add13, b=out15, out=before);

    Or16Way(in=a, out=aIsNotZero);
    Or16Way(in=b, out=bIsNotZero);

    And(a=aIsNotZero, b=bIsNotZero, out=zeroExists);

    // keeping the sign bit
    // check if we mul by 0- we keep it zero.
    Xor(a=a[15], b=b[15], out=sign);
    And16(a[15]=true, a[0..14]=false, b[15]=sign, b[0..14]=false, out=onlySign);

    // delete sign
    And16(a=before, b[15]=false, b[0..14]=true, out=deleteSign);
    Or16(a=deleteSign, b=onlySign, out=between);
    And16(a[15]=zeroExists, a[0..14]=true, b=between, out=out);
}