// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // adress is qqwwwzzzxxxyyy -> qqq says which on of the 4 (RAM64k) we are picking.
    // wwwzzzxxxyyy is sent to all of them and handled inside of them.
    DMux4Way(in=load, sel=address[12..13], a=toRAM0, b=toRAM1, c=toRAM2, d=toRAM3);

    /*
    * we take 8 RAM4k and use them recursivly.
    * IN in[16], load, address[9];
    * OUT out[16];
    */ 
    RAM4K(in=in, load=toRAM0, address=address[0..11], out=ram0);
    RAM4K(in=in, load=toRAM1, address=address[0..11], out=ram1);
    RAM4K(in=in, load=toRAM2, address=address[0..11], out=ram2);
    RAM4K(in=in, load=toRAM3, address=address[0..11], out=ram3);

    // and we output the wanted value
    // we out it to the address picked by 12..13
    Mux4Way16(a=ram0, b=ram1, c=ram2, d=ram3, sel=address[12..13], out=out);
}