// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // address is mmmnnn, mmm is the ram we use out of 8 rams, nnn is the sub
    register in the ram(Num)
    // we pick the correct ram number
    DMux8Way(in=load, sel=address[3..5], a=toRAM0, b=toRAM1, c=toRAM2, d=toRAM3, e=toRAM4, f=toRAM5, g=toRAM6, h=toRAM7);


    /*
    * we take 8 ram8s and use them recursivly.
    * IN in[16], load, address[3];
    * OUT out[16];
    */ 

    RAM8(in=in, load=toRAM0, address=address[0..2], out=ram0);
    RAM8(in=in, load=toRAM1, address=address[0..2], out=ram1);
    RAM8(in=in, load=toRAM2, address=address[0..2], out=ram2);
    RAM8(in=in, load=toRAM3, address=address[0..2], out=ram3);
    RAM8(in=in, load=toRAM4, address=address[0..2], out=ram4);
    RAM8(in=in, load=toRAM5, address=address[0..2], out=ram5);
    RAM8(in=in, load=toRAM6, address=address[0..2], out=ram6);
    RAM8(in=in, load=toRAM7, address=address[0..2], out=ram7);

    // and we output the wanted value
    // we out it to the 3..5 adress which is 
    Mux8Way16(a=ram0, b=ram1, c=ram2, d=ram3, e=ram4, f=ram5, g=ram6, h=ram7, sel=address[3..5], out=out);
}