// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
 
    // ----------------------------------------- preperation ------------------------------------ 

    // code is : ixxaccccccdddjjj -> (opcode)(extraForA)(comp)(comp)(dest[A[5]/M[4]/D[3]])(jump)
    // i=0 if A instruction, i=1 if C instruction
    // figure out instruction type:
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);

    // ----------------------------------------- ARegister ------------------------------------ 

    // ARegister prepreation:
    // mux16 includes ALU output and instruction binary code
    
    // if we have a c instruction that is directed to A we need to load it too.
    And(a=isC, b=instruction[5], out=loadingCheckA);

    // if isA -> instruction is loaded, else, ALUoutput stays.
    Or(a=isA, b=loadingCheckA, out=loadToA);

    // than we check if we output alu or instruction, if it is a c, than alu.
    Mux16(a=instruction, b=ALUoutput, sel=loadingCheckA, out=toRegisterA);
    
    // the ARegister:
    // c : load is the MSB of instructions 
    // which indicates if it is an A instruction or c instruction.
    // load : binary code what we input into the A register, instruction[5]
    ARegister(in=toRegisterA, load=loadToA, out=ARegisterOutput);
     
    // ----------------------------------------- DRegister ------------------------------------ 

    // ALU prepreation:
    // load : binary code what we input into the D register, instruction[4]
    // if we have a c instruction that is directed to A we need to load it too.
    And(a=isC, b=instruction[4], out=loadToD);
    DRegister(in=ALUoutput, load=loadToD, out=DRegisterOutput);

    // ----------------------------------------- ALU ------------------------------------ 
    // ALU prepreation:
    // mux16 includes inM and RegisterA output
    // c :
    Mux16(a=ARegisterOutput, b=inM, sel=instruction[12], out=toALUfromMux);

    // ALU:
    ALU(x=DRegisterOutput, y=toALUfromMux, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        zr=zeroFlag, ng=negFlag, out=ALUoutput);

    // ----------------------------------------- PC ------------------------------------ 

    Not(in=negFlag, out=JGEflag); // if number is not negative -> its positive or equals 0.
    Not(in=zeroFlag, out=notZero);
    And(a=JGEflag, b=notZero, out=posFlag);

    // checking jump conditions : 
    And(a=instruction[0], b=posFlag, out=JGT); // if posFlag = 1 -> ALU out is positive -> JGT allowed.
    And(a=instruction[1], b=zeroFlag, out=JEQ); // if zeroFlag = 1 -> ALU out is 0 -> JEQ allowed.
    And(a=instruction[2], b=negFlag, out=JLT);  // if negFlag = 1 -> ALU out is negative -> JLT allowed.

    Or(a=JEQ, b=JLT, out=JLE); // if JEQ or JLT were met -> JLE will be met too
    Or(a=JLE, b=JGT, out=condition);  // some condition full filled

    // so if we got a c instruction we may jump.
    And(a=isC, b=condition, out=loadPremission); // Only jump if C instruction

    PC(in=ARegisterOutput, inc=true, load=loadPremission, reset=reset, out[0..14]=pc);

    // ----------------------------------------- write To M ------------------------------------ 

    // A<->M are connected, the value inside address in A is stored in M,
    therefore M gets it's address.
    // so we do 2 nots, so the value doesn't change.
    Not16(in=ARegisterOutput, out[0..14]=toAddressM);
    Not16(in[0..14]=toAddressM, in[15]=false, out[0..14]=addressM);

    // same is done with what we out from M, from the ALU.
    Not16(in=ALUoutput, out=toM);
    Not16(in=toM, out=outM);

    // if we have an instruction to write to M, we do so.
    And(a=instruction[3], b=isC, out=writeM);
}