// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
        field Array str;
        field int clength;
        field int mlength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0)
        {
            let maxLength = 1; //reduction
        }
        let str = Array.new(maxLength);
        let clength = 0;
        let mlength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return clength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];

    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(clength<mlength)
        {
            let str[clength] = c;
            let clength = clength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let clength = clength - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        //var int re;
        //var int num;
        var int ind;
        var int num;
        var int mult;
        var int chr;
        let ind = clength-1;
        let num = 0;
        let mult = 1;


        while((ind>0) | (ind = 0))
        {
            let chr = (str[ind] - 48);
            if((chr > -1) & (chr < 10))
            {
                // num = num + (int_of_char * mult)
                // when mult is 1,10,100... etc'
                let num = num + (chr * mult);
                let mult = mult * 10;
                let ind = ind - 1;
            }
            else
            {
                if(str[ind] = 45){
                    return 0-num;
                }
                else{
                    return num;
                }
            }
        }
        return num;
    }

    method void recSetInt(int val){
        var int nval;
        var int rem;

        if(val < 10)
        {
            do appendChar(48+val);
        }
        else
        {
            let nval = val/10;
            let rem = val-(nval * 10);
            do recSetInt(nval);
            do appendChar(rem+48);
        }
        return;


    } // recursive function

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let clength = 0;
        if(val < 0)
        {
            do appendChar(45); // add '-'
            let val = -val; //make number positive
        }
        do recSetInt(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}