// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array power_array;
    static int remainder; //i think its supposed to be a field.

    /** Initializes the library. */
    function void init() {

        var int i, two_pow;

        let i = 0;
        let two_pow = 1;
        let power_array = Array.new(16);

        while(i < 16)
        {
            let power_array[i] = two_pow;
            let two_pow = two_pow + two_pow;
            let i = i+1;
        }

        return;

    }

    /** Returns the absolute value of x. */
    function int abs(int x) {

        if(x<0){
            let x=0-x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int multx;
        var int i;
        var int sub_bit;

        let i = 0;
        let sum = 0;
        let multx = x;

        while(i < 16){
            let sub_bit = power_array[i];
            if(sub_bit&y){
                let sum = sum + multx;
            }
            let i = i+1;
            let multx = multx + multx;
        }
        return sum;
    }

    function int divide_helper(int x, int y){

        var int q;

        if(x<y){
            let remainder = x;
            return 0;
        }

        let q = Math.divide_helper(x,y+y);
        if(remainder<y){
            let q = q + q;
        }
        else{
            let q = q + q + 1;
            let remainder = remainder-y;
        }

        return q;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

        var int division;
        var int abs_x,abs_y;

        if (x=0){
            return 0;
        }

        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);

        if(abs_y > abs_x){
            return 0;
        }

        let division = Math.divide_helper(abs_x,abs_y);

        if((x<0)&(y<0)){
            let division = division;
        }
        if((x>0)&(y>0)){
            let division = division;
        }
        if((x<0)&(y>0)){
            let division = 0-division;
        }

        if((x>0)&(y<0)){
            let division = 0-division;
        }

        return division;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {

        var int y;
        var int n;
        var int sum_p;
        var int current_power;

        var boolean check;

        let n = 7;
        let current_power = power_array[n];
        let y = 0;

        if(x<0){
            return 0;
        }

        /**
            the condition for the if will not be (y+2^j)^2 <= x
            it will be  (y+2^j)^2 <= x and (y+2^j)^2 > 0
        **/

        let sum_p = y + current_power;
        let check = (~(sum_p*sum_p > x)) & (sum_p*sum_p > 0);

        while(~(n<0)){

            if(check){
                let y = y + power_array[n];
            }
            let n = n - 1;

            let current_power = power_array[n];
            let sum_p = y + current_power;
            let check = (~(sum_p*sum_p > x)) & (sum_p*sum_p > 0);
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {

        var int max;

        if(a>b){
            let max = a;
        }
        else{
            let max = b;
        }

        return max;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

        var int min;

        if(a<b){
            let min = a;
        }
        else{
            let min = b;
        }

        return min;
    }
}
